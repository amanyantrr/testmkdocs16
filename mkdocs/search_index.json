{
    "docs": [
        {
            "location": "/", 
            "text": "Vayu Cape SW images and drivers\n\n\nVayu capes are fully supported for Debian Wheezy ARMHF (Official Page). The kernel tree is based on Robert C Nelson git tree and all the commits are based on the latest kernel. Kindly follow his wiki for detailed steps on how to compile the kernel from scratch. BBB-RobertCNelson-Main Wiki.\n\n\nWe have compiled a bootable microSD card image for easy plug and play demonstration of the Vayu 2G and 3G capes. Additionally we have outlined detailed step by step compilation of this image based on BBB-RobertCNelson-Main Wiki. If you are using distribution other than debian, the kernel patches are listed, kindly recompile your kernel based on directed patches, enable PPS support (if your capes have GPS timing module) and you should be ready to go.\n\n\nWe know in world of Linux, things get a bit complicated, we have FAQ's which may help you to unblock, kindly follow these. \n\n\nReady to use downloadable Debian Wheezy image\n\n\n\n\nTo get started quickly, download and extract image file from the links given below and flash to a 4GB SD CARD.\n\n\nThis prebuilt SD card image (4GB size) or EMMC flasher image already has all the required drivers and extra functions and packages to be used by the Cape.\n\n\n\n\nDownload Files:\n\n\n\n\nDownload these files from the dropbox:\n\n\n\n\nMicroSD card Image\n \n \nVAYU_Debian_bone70_061215.img.xz file\n\n\neMMC Flasher Image\n \n \nVayu_emmc_flasher_4GB_3.8.13bone32.img.xz\n\n\nOverlay\n \n \nBBB_VAYU-00A0.dtbo file\n\n (if using another image, place in /lib/firmware)\n\n\nOverlay\n \n \nBBB_VAYU.dts file\n\n (for reference only)\n\n\n'Note:' The dts source file is here for reference only in case you wish to compile the overlay yourself with the dtc compiler.\n\n\n\n\nExtract the image file from the above xz file and then flash it to a 4GB(atleast) sd card. Follow steps mentioned here for flashing and using the images.\n\n\n\n\nFor linux :\n\n\nunxz VAYU_Debian_bone70_061215.img.xz\nsudo dd if=./VAYU_Debian_bone70_061215.img of=/dev/sdX\n\n\n\n\n\n\n\nBeaglebone Black will boot by default from MicroSD card flashed with MicroSD card Image , if present in its slot at bootup. With this option, the microSD card is essential and the eMMC is left untouched.\n\n\n\n\n\n\nBeaglebone Black will also boot by default from MicroSD card flashed with eMMC Flasher Image but it will then Flash the eMMC, a process that takes around 15 minutes. After flashing is complete, all the 4 LEDs will glow. You can then power off the board, remove microSD card and power up Beaglebone Black again. Now it will boot up from eMMC with our prebuilt image. With this option, a microSD card is no longer needed.\n\n\n\n\n\n\nFor more detailed instructions, follow this link \n\nUpdating the Software\n\n\n\n\n\n\nThe precompiled image file has:\n\n\n\n\nPPS GPIO support using the dtbo file for initializing the device tree overlay.\n\n\nPPS drivers, required by NTP server.\n\n\nUSB drivers , required by 3G(UMTS/CDMA) modem.\n\n\nNTP server preconfigured ( if using GPS module) with servers set for Asia/India\n\n\nPPPd/Wvdial tool to establish 2G and 3G connection (only Service provider data has to be updated) with sample provider files. We have included AT\nT and T-Mobile wvdial conf sample files for US users.\n\n\nHelpful scripts for operating GPIOs (under /root/bin for activating/reading pins directly) and applying overlays and pin settings at bootup (as /root/boot_run.sh ).\n\n\n\n\nBasic steps for Using 3G (GSM/WCDMA) Modem\n\n\n\n\nAttach cape to beaglebone black and boot up .\n\n\nKeep USB cable unattached initially from the Beaglebone Black host port.\n\n\nPlace a data-enabled GSM mini-SIM in the SIM card slot. In case of CDMA, the RUIM can be placed in the same SIM card slot.\n\n\nIn the pre-built image, all the required pin initialization and device tree overlays are applied by commands in the crontab after bootup(of user root).\n\n\n\n\nAfter bootup is complete, login to Beaglebone Black.\n\n\n\n\n\n\nAfter logging in, turn on the modem by one of these options:\n\n\n\n\nUsing Pre-built Image\n\n\n\n\nPressing switch S1 for 4 seconds and releasing, or\n\n\n\n\n\n\nIssue the commands:\n\n\necho \"high\" \n /sys/class/gpio/gpio45/direction\nsleep 4\necho \"low\" \n /sys/class/gpio/gpio45/direction\nsleep 4\necho \"high\" \n /sys/class/gpio/gpio45/direction\n\n\n\n\n\n\n\nUsing Another Image\n (without prebuilt USB drivers for GSM/WCDMA modem)\n\n\ncd /sys/class/gpio/\necho 45 \n export\ncd gpio45\necho \"high\" \n direction\nsleep 4\necho \"low\" \n direction\nsleep 4\necho \"high\" \n direction\n\n\n\n\n\n\n\nAfter some time, LED D4 should turn on and glow continuously which indicates modem has turned on. This LED, NETLIGHT LED is a new feature and is functional in latest versions of the cape. Earlier, LED D4 remained off all the time.\n\n\n\n\n\n\nNow, attach usb cable between mini USB port (#16) of cape and host port of Beaglebone Black.\nAlternatively, if the USB host port on cape is also populated,then the USB cable can be kept intact before Board was booted up.\n\n\n\n\n\n\nCheck that modem is visible on the USB bus by:\n\n\nlsusb\n\nBus 001 Device 002: ID 0424:2412 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 007: ID 21f5:2012\n\n\n\n\n\n\n\nYou can also check that ports have been assigned for the modem by :\n\n\n\n\n\n\nUsing Pre-built Image\n\n\n    ls /dev/ttyUSB*\n\n    /dev/ttyUSB0  /dev/ttyUSB1  /dev/ttyUSB2\n\n\n\nUsing Another Image\n\n\n    modprobe usbserial vendor=0x21f5 product=0x2012\n    lsusb\n\n    Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp.\n    Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n    Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n    Bus 001 Device 007: ID 21f5:2012\n\n\n\n\n\n\n\nSystem messages show what happened after applying modprobe usbserial \n\n\ndmesg | grep -i usb\n\nusb 1-1.1: New USB device found, idVendor=21f5, idProduct=2012\nusb 1-1.1: New USB device strings: Mfr=3, Product=2, SerialNumber=4\nusb 1-1.1: Product: StrongRising Technologies\nusb 1-1.1: Manufacturer: Modem\nusb 1-1.1: SerialNumber: 000000000002\nusb 1-1.1: usb_probe_device\nusb 1-1.1: configuration #1 chosen from 1 choice\nusb 1-1.1: adding 1-1.1:1.0 (config #1, interface 0)\nusbserial_generic 1-1.1:1.0: usb_probe_interface\nusbserial_generic 1-1.1:1.0: usb_probe_interface - got id\nusbserial_generic 1-1.1:1.0: The \"generic\" usb-serial driver is only for testing and one-off prototypes.\nusbserial_generic 1-1.1:1.0: Tell linux-usb@vger.kernel.org to add your device to a proper driver.\nusbserial_generic 1-1.1:1.0: generic converter detected\nusb 1-1.1: generic converter now attached to ttyUSB0\nusb 1-1.1: adding 1-1.1:1.1 (config #1, interface 1)\nusbserial_generic 1-1.1:1.1: usb_probe_interface\nusbserial_generic 1-1.1:1.1: usb_probe_interface - got id\nusbserial_generic 1-1.1:1.1: The \"generic\" usb-serial driver is only for testing and one-off prototypes.\nusbserial_generic 1-1.1:1.1: Tell linux-usb@vger.kernel.org to add your device to a proper driver.\nusbserial_generic 1-1.1:1.1: generic converter detected\nusb 1-1.1: generic converter now attached to ttyUSB1\nusb 1-1.1: adding 1-1.1:1.2 (config #1, interface 2)\nusbserial_generic 1-1.1:1.2: usb_probe_interface\nusbserial_generic 1-1.1:1.2: usb_probe_interface - got id\nusbserial_generic 1-1.1:1.2: The \"generic\" usb-serial driver is only for testing and one-off prototypes.\nusbserial_generic 1-1.1:1.2: Tell linux-usb@vger.kernel.org to add your device to a proper driver.\nusbserial_generic 1-1.1:1.2: generic converter detected\nusb 1-1.1: generic converter now attached to ttyUSB2\n\n\n\n\n\n\n\nIt is recommended to add a proper driver for the modem in kernel. The generic driver is not reliable.\n\n\n\n\n\n\nThe modem is now ready for use with pon/poff(PPPd), Wvdial or any other dialer program.\n\n\n\n\n\n\nBasic Steps for Using GPS\n\n\n\n\n\n\nUsing pre-built image.\n\n\n\n\n\n\nIn the pre-built image, the GPS device is enabled (in crontab under root) by default at bootup on the /dev/ttyO4 port. To quickly test the GPS, issue the following commands:\n\n\nstty -F /dev/ttyO4 raw 19200\ncat /dev/ttyO4\n\n\n\n\n\n\n\nThis should produce the text NMEA messages as received from the GPS device.\n\n\n$GPRMC,140615.00,A,2834.25835,N,07720.54109,E,0.033,53.14,240214,0.00,E,D,V*70\n$GPVTG,53.14,T,0.00,M,0.033,N,0.061,K,D*12\n$GPGGA,140615.00,2834.25835,N,07720.54109,E,1,11,0.80,199.5,M,-36.0,M,,*70\n$GPGSA,A,3,07,08,28,09,19,03,27,10,23,13,11,,1.81,0.80,1.62,1*1A\n$GPGSV,4,1,15,13,72,176,32,07,53,346,48,19,52,080,38,03,40,052,39,1*69\n$GPGSV,4,2,15,23,37,159,33,28,31,255,42,08,29,313,45,27,25,046,37,1*65\n$GPGSV,4,3,15,09,23,312,43,11,22,135,28,10,17,260,33,16,08,049,10,1*65\n$GPGSV,4,4,15,01,03,150,22,05,00,312,,40,,,38,1*6C\n$GPGLL,2834.25835,N,07720.54109,E,140615.00,A,D*64\n$GPZDA,140615.00,24,02,2014,-00,00*4F\n\n\n\n\n\n\n\nUsing another image.\n\n\n\n\n\n\nTo ensure that the GPS device is enabled, check the reset signal,GPIO 50. It should always be high and in output mode.\n\n\ncd /sys/class/gpio/\necho 50 \n export\ncd gpio50\necho \"high\" \n direction\n\n\n\n\n\n\n\nSince the GPS device is attached to the generic /dev/ttyO4 serial port(UART4) on Beaglebone black, it is possible to access it without any special drivers. So we need to enable the device tree overlay for /dev/ttyO4 (uart4) on beaglebone black:\n\n\ncd /lib/firmware\necho BB-UART4 \n /sys/devices/bone_capemgr.9/slots\nstty -F /dev/ttyO4 raw 19200\ncat /dev/ttyO4\n\n\n\n\n\n\n\nFor more details, see Configuring for GPS Location and Time Synchronization.\n\n\n\n\n\n\nBasic Steps for Using PPS\n\n\n\n\n\n\nFor PPS support, it is essential to have PPS drivers enabled in the kernel. For this reason, it is advisable to use the pre-built kernel image or use another image verified to have PPS support built in already. Once this is done, the following steps can be executed:\n\n\n\n\n\n\nEnable PPS pin as interrupt (already done if booting with pre-built image):\n\n\ncd /lib/firmware\necho BBB_VAYU \n /sys/devices/bone_capemgr.9/slots\n\n\n\n\n\n\n\nVerify pps signal is activated in the kernel\n\n\n/usr/src/pps-tools/ppstest /dev/pps1\n\n\n\n\n\n\n\nFor more details, see \n\nConfiguring for GPS Location and Time Synchronization.\n\n\n\n\n\n\nCompiling the SD card image from scratch\n\n\nThis section describes how to compile the Debian image from scratch to enable\n\n\n\n\nPPS drivers, required by NTP server\n\n\nUSB drivers , required by 3G(UMTS/CDMA) modem\n\n\nCustom wvdial conf file to enable connections\n\n\nDevice tree overlays to enable PPS GPIO support\n\n\nHelpful scripts\n\n\n\n\nKindly follow this page for the detailed outlined steps - \n\nCompiling Yantrr Vayu Drivers on Debian Wheezy\n\n\nModifying your existing kernel or other distribution\n\n\nIf you are having your own branch of kernel and following some other linux distribution like Ubuntu, Angstrom, you can use following wiki to recompile the kernel to support Vayu capes. We dont officially support it, but hopefully would make it easier.\n\n\nNote :\n\n\n\n\n\n\nVayu 2G cape -\n These are fully supported in all linux distribution with device tree and overlay support, you just need the Vayu cape overlay to configure UART's\n\n\n\n\n\n\nVayu 2G + GPS capes - \nThese need PPS support for GPIO in kernel, you may need to rebuilt your kernel to enable these, the details are outlined here from make menuconfig.\n\n\n\n\n\n\nVayu 3G \n 3G + GPS capes -\n These may need USB driver support in addition to GPS PPS support.", 
            "title": "Home"
        }, 
        {
            "location": "/#vayu-cape-sw-images-and-drivers", 
            "text": "Vayu capes are fully supported for Debian Wheezy ARMHF (Official Page). The kernel tree is based on Robert C Nelson git tree and all the commits are based on the latest kernel. Kindly follow his wiki for detailed steps on how to compile the kernel from scratch. BBB-RobertCNelson-Main Wiki.  We have compiled a bootable microSD card image for easy plug and play demonstration of the Vayu 2G and 3G capes. Additionally we have outlined detailed step by step compilation of this image based on BBB-RobertCNelson-Main Wiki. If you are using distribution other than debian, the kernel patches are listed, kindly recompile your kernel based on directed patches, enable PPS support (if your capes have GPS timing module) and you should be ready to go.  We know in world of Linux, things get a bit complicated, we have FAQ's which may help you to unblock, kindly follow these.", 
            "title": "Vayu Cape SW images and drivers"
        }, 
        {
            "location": "/#ready-to-use-downloadable-debian-wheezy-image", 
            "text": "To get started quickly, download and extract image file from the links given below and flash to a 4GB SD CARD.  This prebuilt SD card image (4GB size) or EMMC flasher image already has all the required drivers and extra functions and packages to be used by the Cape.   Download Files:   Download these files from the dropbox:   MicroSD card Image  \n  VAYU_Debian_bone70_061215.img.xz file  eMMC Flasher Image  \n  Vayu_emmc_flasher_4GB_3.8.13bone32.img.xz  Overlay  \n  BBB_VAYU-00A0.dtbo file \n (if using another image, place in /lib/firmware)  Overlay  \n  BBB_VAYU.dts file \n (for reference only)  'Note:' The dts source file is here for reference only in case you wish to compile the overlay yourself with the dtc compiler.   Extract the image file from the above xz file and then flash it to a 4GB(atleast) sd card. Follow steps mentioned here for flashing and using the images.   For linux :  unxz VAYU_Debian_bone70_061215.img.xz\nsudo dd if=./VAYU_Debian_bone70_061215.img of=/dev/sdX    Beaglebone Black will boot by default from MicroSD card flashed with MicroSD card Image , if present in its slot at bootup. With this option, the microSD card is essential and the eMMC is left untouched.    Beaglebone Black will also boot by default from MicroSD card flashed with eMMC Flasher Image but it will then Flash the eMMC, a process that takes around 15 minutes. After flashing is complete, all the 4 LEDs will glow. You can then power off the board, remove microSD card and power up Beaglebone Black again. Now it will boot up from eMMC with our prebuilt image. With this option, a microSD card is no longer needed.    For more detailed instructions, follow this link  Updating the Software    The precompiled image file has:   PPS GPIO support using the dtbo file for initializing the device tree overlay.  PPS drivers, required by NTP server.  USB drivers , required by 3G(UMTS/CDMA) modem.  NTP server preconfigured ( if using GPS module) with servers set for Asia/India  PPPd/Wvdial tool to establish 2G and 3G connection (only Service provider data has to be updated) with sample provider files. We have included AT T and T-Mobile wvdial conf sample files for US users.  Helpful scripts for operating GPIOs (under /root/bin for activating/reading pins directly) and applying overlays and pin settings at bootup (as /root/boot_run.sh ).", 
            "title": "Ready to use downloadable Debian Wheezy image"
        }, 
        {
            "location": "/#basic-steps-for-using-3g-gsmwcdma-modem", 
            "text": "Attach cape to beaglebone black and boot up .  Keep USB cable unattached initially from the Beaglebone Black host port.  Place a data-enabled GSM mini-SIM in the SIM card slot. In case of CDMA, the RUIM can be placed in the same SIM card slot.  In the pre-built image, all the required pin initialization and device tree overlays are applied by commands in the crontab after bootup(of user root).   After bootup is complete, login to Beaglebone Black.    After logging in, turn on the modem by one of these options:   Using Pre-built Image   Pressing switch S1 for 4 seconds and releasing, or    Issue the commands:  echo \"high\"   /sys/class/gpio/gpio45/direction\nsleep 4\necho \"low\"   /sys/class/gpio/gpio45/direction\nsleep 4\necho \"high\"   /sys/class/gpio/gpio45/direction    Using Another Image  (without prebuilt USB drivers for GSM/WCDMA modem)  cd /sys/class/gpio/\necho 45   export\ncd gpio45\necho \"high\"   direction\nsleep 4\necho \"low\"   direction\nsleep 4\necho \"high\"   direction    After some time, LED D4 should turn on and glow continuously which indicates modem has turned on. This LED, NETLIGHT LED is a new feature and is functional in latest versions of the cape. Earlier, LED D4 remained off all the time.    Now, attach usb cable between mini USB port (#16) of cape and host port of Beaglebone Black. Alternatively, if the USB host port on cape is also populated,then the USB cable can be kept intact before Board was booted up.    Check that modem is visible on the USB bus by:  lsusb\n\nBus 001 Device 002: ID 0424:2412 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 007: ID 21f5:2012    You can also check that ports have been assigned for the modem by :    Using Pre-built Image      ls /dev/ttyUSB*\n\n    /dev/ttyUSB0  /dev/ttyUSB1  /dev/ttyUSB2  Using Another Image      modprobe usbserial vendor=0x21f5 product=0x2012\n    lsusb\n\n    Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp.\n    Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n    Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n    Bus 001 Device 007: ID 21f5:2012    System messages show what happened after applying modprobe usbserial   dmesg | grep -i usb\n\nusb 1-1.1: New USB device found, idVendor=21f5, idProduct=2012\nusb 1-1.1: New USB device strings: Mfr=3, Product=2, SerialNumber=4\nusb 1-1.1: Product: StrongRising Technologies\nusb 1-1.1: Manufacturer: Modem\nusb 1-1.1: SerialNumber: 000000000002\nusb 1-1.1: usb_probe_device\nusb 1-1.1: configuration #1 chosen from 1 choice\nusb 1-1.1: adding 1-1.1:1.0 (config #1, interface 0)\nusbserial_generic 1-1.1:1.0: usb_probe_interface\nusbserial_generic 1-1.1:1.0: usb_probe_interface - got id\nusbserial_generic 1-1.1:1.0: The \"generic\" usb-serial driver is only for testing and one-off prototypes.\nusbserial_generic 1-1.1:1.0: Tell linux-usb@vger.kernel.org to add your device to a proper driver.\nusbserial_generic 1-1.1:1.0: generic converter detected\nusb 1-1.1: generic converter now attached to ttyUSB0\nusb 1-1.1: adding 1-1.1:1.1 (config #1, interface 1)\nusbserial_generic 1-1.1:1.1: usb_probe_interface\nusbserial_generic 1-1.1:1.1: usb_probe_interface - got id\nusbserial_generic 1-1.1:1.1: The \"generic\" usb-serial driver is only for testing and one-off prototypes.\nusbserial_generic 1-1.1:1.1: Tell linux-usb@vger.kernel.org to add your device to a proper driver.\nusbserial_generic 1-1.1:1.1: generic converter detected\nusb 1-1.1: generic converter now attached to ttyUSB1\nusb 1-1.1: adding 1-1.1:1.2 (config #1, interface 2)\nusbserial_generic 1-1.1:1.2: usb_probe_interface\nusbserial_generic 1-1.1:1.2: usb_probe_interface - got id\nusbserial_generic 1-1.1:1.2: The \"generic\" usb-serial driver is only for testing and one-off prototypes.\nusbserial_generic 1-1.1:1.2: Tell linux-usb@vger.kernel.org to add your device to a proper driver.\nusbserial_generic 1-1.1:1.2: generic converter detected\nusb 1-1.1: generic converter now attached to ttyUSB2    It is recommended to add a proper driver for the modem in kernel. The generic driver is not reliable.    The modem is now ready for use with pon/poff(PPPd), Wvdial or any other dialer program.    Basic Steps for Using GPS    Using pre-built image.    In the pre-built image, the GPS device is enabled (in crontab under root) by default at bootup on the /dev/ttyO4 port. To quickly test the GPS, issue the following commands:  stty -F /dev/ttyO4 raw 19200\ncat /dev/ttyO4    This should produce the text NMEA messages as received from the GPS device.  $GPRMC,140615.00,A,2834.25835,N,07720.54109,E,0.033,53.14,240214,0.00,E,D,V*70\n$GPVTG,53.14,T,0.00,M,0.033,N,0.061,K,D*12\n$GPGGA,140615.00,2834.25835,N,07720.54109,E,1,11,0.80,199.5,M,-36.0,M,,*70\n$GPGSA,A,3,07,08,28,09,19,03,27,10,23,13,11,,1.81,0.80,1.62,1*1A\n$GPGSV,4,1,15,13,72,176,32,07,53,346,48,19,52,080,38,03,40,052,39,1*69\n$GPGSV,4,2,15,23,37,159,33,28,31,255,42,08,29,313,45,27,25,046,37,1*65\n$GPGSV,4,3,15,09,23,312,43,11,22,135,28,10,17,260,33,16,08,049,10,1*65\n$GPGSV,4,4,15,01,03,150,22,05,00,312,,40,,,38,1*6C\n$GPGLL,2834.25835,N,07720.54109,E,140615.00,A,D*64\n$GPZDA,140615.00,24,02,2014,-00,00*4F    Using another image.    To ensure that the GPS device is enabled, check the reset signal,GPIO 50. It should always be high and in output mode.  cd /sys/class/gpio/\necho 50   export\ncd gpio50\necho \"high\"   direction    Since the GPS device is attached to the generic /dev/ttyO4 serial port(UART4) on Beaglebone black, it is possible to access it without any special drivers. So we need to enable the device tree overlay for /dev/ttyO4 (uart4) on beaglebone black:  cd /lib/firmware\necho BB-UART4   /sys/devices/bone_capemgr.9/slots\nstty -F /dev/ttyO4 raw 19200\ncat /dev/ttyO4    For more details, see Configuring for GPS Location and Time Synchronization.", 
            "title": "Basic steps for Using 3G (GSM/WCDMA) Modem"
        }, 
        {
            "location": "/#basic-steps-for-using-pps", 
            "text": "For PPS support, it is essential to have PPS drivers enabled in the kernel. For this reason, it is advisable to use the pre-built kernel image or use another image verified to have PPS support built in already. Once this is done, the following steps can be executed:    Enable PPS pin as interrupt (already done if booting with pre-built image):  cd /lib/firmware\necho BBB_VAYU   /sys/devices/bone_capemgr.9/slots    Verify pps signal is activated in the kernel  /usr/src/pps-tools/ppstest /dev/pps1    For more details, see  Configuring for GPS Location and Time Synchronization.", 
            "title": "Basic Steps for Using PPS"
        }, 
        {
            "location": "/#compiling-the-sd-card-image-from-scratch", 
            "text": "This section describes how to compile the Debian image from scratch to enable   PPS drivers, required by NTP server  USB drivers , required by 3G(UMTS/CDMA) modem  Custom wvdial conf file to enable connections  Device tree overlays to enable PPS GPIO support  Helpful scripts   Kindly follow this page for the detailed outlined steps -  Compiling Yantrr Vayu Drivers on Debian Wheezy", 
            "title": "Compiling the SD card image from scratch"
        }, 
        {
            "location": "/#modifying-your-existing-kernel-or-other-distribution", 
            "text": "If you are having your own branch of kernel and following some other linux distribution like Ubuntu, Angstrom, you can use following wiki to recompile the kernel to support Vayu capes. We dont officially support it, but hopefully would make it easier.  Note :    Vayu 2G cape -  These are fully supported in all linux distribution with device tree and overlay support, you just need the Vayu cape overlay to configure UART's    Vayu 2G + GPS capes -  These need PPS support for GPIO in kernel, you may need to rebuilt your kernel to enable these, the details are outlined here from make menuconfig.    Vayu 3G   3G + GPS capes -  These may need USB driver support in addition to GPS PPS support.", 
            "title": "Modifying your existing kernel or other distribution"
        }
    ]
}